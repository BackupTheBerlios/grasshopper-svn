##################################################################
#
# Implicit Rules for easy creating autotools-compatible packages
#
# Author: Benjamin Tietz <benjamin@micronet24.de>
# 		(C) 2007
# License: GPL
#
##################################################################

# Macros for Variable and programmname-generation
SED_UPPERCASE=$(firstword $(SED)) -e 'y/abcdefghijklmnopqrstuvwxyz-./ABCDEFGHIJKLMNOPQRSTUVWXYZ__/'
VAR=$(shell echo $(call MYNAME,$(1)) | $(SED_UPPERCASE) )
MYNAME=$(shell echo $(call MYNAMEVER,$(1)) | $(firstword $(SED)) -e 's/\([-._][0-9][0-9]*\)*$$//') 
MYVER=$(shell echo $(call MYNAMEVER,$(1)) | $(firstword $(SED)) -e 's/\([^0-9]*-\)*//')
MYNAMEVER=$(notdir $(patsubst %.tar,%,$(patsubst %/,%,$(basename $(1)))))

# Generic File retrievel Target
$(DL_DIR)/%:
	@$(WGET) -P $(DL_DIR) $$([ "$($(call VAR,$@)_SITE)" ] && echo $($(call VAR,$@)_SITE) || echo http://$(BR2_SOURCEFORGE_MIRROR).dl.sourceforge.net/sourceforge/$(firstword $(subst -, ,$@))/$@)

# Unpacking the archive
$(BUILD_DIR)/%/.unpacked: $(DL_DIR)/%.tgz
$(BUILD_DIR)/%/.unpacked: $(DL_DIR)/%.tar.gz
	$(ZCAT) $< | tar -C $(BUILD_DIR) $(TAR_OPTIONS) -
	@touch $@

$(BUILD_DIR)/%/.unpacked: $(DL_DIR)/%.tar.bz2
	$(BZCAT) $< | tar -C $(BUILD_DIR) $(TAR_OPTIONS) -
	@touch $@

$(BUILD_DIR)/%/.unpacked: $(DL_DIR)/%.tar
	tar -C $(BUILD_DIR) $(TAR_OPTIONS) $<
	@touch $@

# Patching
$(BUILD_DIR)/%/.patched: $(BUILD_DIR)/%/.unpacked
	@(if [ -d package/$(call MYNAME,$<)]; then \
		if [ "$(wildcard package/$(call MYNAME,$@)/$**.patch)" ]; then \
			toolchain/patch-kernel.sh $(@D) package/$(call MYNAME,$<) $*\*.patch; \
		else \
			toolchain/patch-kernel.sh $(@D) package/$(call MYNAME,$<) $(call MYNAME,$<)\*.patch; \
			[ -d package/$(call MYNAME,$<)/$* ] && \
				toolchain/patch-kernel.sh $(@D) package/$(call MYNAME,$<)/$* \*.patch; \
		fi;\
	fi)
ifeq ($(BR2_UPDATE_CONFIG),y)
	@(for file in config.guess config.sub; do\
		for i in $$(find $(@D) -name $$file); do \
			cp package/gnuconfig/$$file $$i; \
		done;\
	done)
endif
	@touch $@

# Configuring
$(BUILD_DIR)/%/.configured: $(BUILD_DIR)/%/.patched
	(cd $(@D); \
		$(TARGET_CONFIGURE_OPTS) \
		CFLAGS="$(TARGET_CFLAGS)" \
		LDFLAGS="$(TARGET_LDFLAGS)" \
		$($(call VAR,$@)_CONF_ENV) \
		./configure \
		--target=$(GNU_TARGET_NAME) \
		--host=$(GNU_TARGET_NAME) \
		--build=$(GNU_HOST_NAME) \
		--prefix=/usr \
		--sysconfdir=/etc \
		$($(call VAR,$@)_CONF_OPT) \
	);
	touch $@;

# Building
$(BUILD_DIR)/%/.build: $(BUILD_DIR)/%/.configured
	$($(call VAR,$@)_MAKE_ENV) $(MAKE) $($(call VAR,$@)_MAKE_OPT) -C $(@D)
	touch $@

$(BUILD_DIR)/%/.installed: $(BUILD_DIR)/%/.build
	$($(call VAR,$@)_MAKE_ENV) $(MAKE) DESTDIR=$(TARGET_DIR) $($(call VAR,$@)_MAKE_OPT) -C $(@D) install
	rm -Rf $(TARGET_DIR)/usr/man
	touch $@

$(BUILD_DIR)/%/.libs: $(BUILD_DIR)/%/.installed
	$($(call VAR,$@)_MAKE_ENV) $(MAKE) DESTDIR=$(STAGING_DIR) $($(call VAR,$@)_MAKE_OPT) -C $(@D) install
	rm -Rf $(STAGING_DIR)/man $(TARGET_DIR)/usr/include
	touch $@

$(BUILD_DIR)/%/.clean:
	$($(call VAR,$@)_MAKE_ENV) $(MAKE) DESTDIR=$(STAGING_DIR) $($(call VAR,$@)_MAKE_OPT) -C $(@D) uninstall
	-$(MAKE) -C $(@D) clean

$(BUILD_DIR)/%/.dirclean:
	rm -Rf $(@D)

%-distrib:
	@echo BR2_PACKAGE_$(shell echo $* | $(SED_UPPERCASE)) = y >> .distrib
	@echo $(shell echo $* | $(SED_UPPERCASE))_VERSION = $($(shell echo $* | $(SED_UPPERCASE))_VERSION) >> .distrib
